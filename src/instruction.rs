/* file:    instruction.rs
 * author:  garnt
 * date:    10/18/2022
 * desc:    representation of a single LR35902 instruction
 */

use crate::garntboy_state::GarntboyState;

// struct representing a single LR35902 instruction
#[derive(Clone, Copy, Debug)]
pub struct Instruction {
   opcode: u8,
   mnemonic: &'static str,
   length: u8,
   cycles: u8,
}

impl Instruction {
    const fn new(op: u8, mn: &'static str, len: u8, cyc: u8) -> Instruction {
        Instruction {opcode: op, mnemonic: mn, length: len, cycles: cyc}
    }
}

// array of every *implemented* LR35902 instruction
pub const INSTRUCTIONS: [Instruction; 256] = [
    Instruction::new(0x00, "NOP", 1, 4),
    Instruction::new(0x01, "LD BC, {:#x}", 3, 12),
    Instruction::new(0x02, "LD (BC), A", 1, 8),
    Instruction::new(0x03, "INC BC", 1, 8),
    Instruction::new(0x04, "INC B", 1, 4),
    Instruction::new(0x05, "DEC B", 1, 4),
    Instruction::new(0x06, "LD B, {:#x}", 2, 8),
    Instruction::new(0x07, "RLCA", 1, 4),
    Instruction::new(0x08, "LD ({:#x}), SP", 3, 20),
    Instruction::new(0x09, "ADD HL, BC", 1, 8),
    Instruction::new(0x0a, "LD A, (BC)", 1, 8),
    Instruction::new(0x0b, "DEC BC", 1, 8),
    Instruction::new(0x0c, "INC C", 1, 4),
    Instruction::new(0x0d, "DEC C", 1, 4),
    Instruction::new(0x0e, "LD C, {:#x}", 2, 8),
    Instruction::new(0x0f, "RRCA", 1, 4),
    Instruction::new(0x10, "STOP 0", 2, 4),
    Instruction::new(0x11, "LD DE, {:#x}", 3, 12),
    Instruction::new(0x12, "LD (DE), A", 1, 8),
    Instruction::new(0x13, "INC DE", 1, 8),
    Instruction::new(0x14, "INC D", 1, 4),
    Instruction::new(0x15, "DEC D", 1, 4),
    Instruction::new(0x16, "LD D, {:#x}", 2, 8),
    Instruction::new(0x17, "RLA", 1, 4),
    Instruction::new(0x18, "JR {:#x}", 2, 12),
    Instruction::new(0x19, "ADD HL, DE", 1, 8),
    Instruction::new(0x1a, "LD A, (DE)", 1, 8),
    Instruction::new(0x1b, "DEC DE", 1, 8),
    Instruction::new(0x1c, "INC E", 1, 4),
    Instruction::new(0x1d, "DEC E", 1, 4),
    Instruction::new(0x1e, "LD E, {:#x}", 2, 8),
    Instruction::new(0x1f, "RRA", 1, 4),
    Instruction::new(0x20, "JR NZ, {:#x}", 2, 12),
    Instruction::new(0x21, "LD HL, {:#x}", 3, 12),
    Instruction::new(0x22, "LD (HL+), A", 1, 8),
    Instruction::new(0x23, "INC HL", 1, 8),
    Instruction::new(0x24, "INC H", 1, 4),
    Instruction::new(0x25, "DEC H", 1, 4),
    Instruction::new(0x26, "LD H, {:#x}", 2, 8),
    Instruction::new(0x27, "DAA", 1, 4),
    Instruction::new(0x28, "JR Z, {:#x}", 2, 12),
    Instruction::new(0x29, "ADD HL, HL", 1, 8),
    Instruction::new(0x2a, "LD A, (HL+)", 1, 8),
    Instruction::new(0x2b, "DEC HL", 1, 8),
    Instruction::new(0x2c, "INC L", 1, 4),
    Instruction::new(0x2d, "DEC L", 1, 4),
    Instruction::new(0x2e, "LD L, {:#x}", 2, 8),
    Instruction::new(0x2f, "CPL", 1, 4),
    Instruction::new(0x30, "JR NC, {:#x}", 2, 12),
    Instruction::new(0x31, "LD SP, {:#x}", 3, 12),
    Instruction::new(0x32, "LD (HL-), A", 1, 8),
    Instruction::new(0x33, "INC SP", 1, 8),
    Instruction::new(0x34, "INC (HL)", 1, 12),
    Instruction::new(0x35, "DEC (HL)", 1, 12),
    Instruction::new(0x36, "LD (HL), {:#x}", 2, 12),
    Instruction::new(0x37, "SCF", 1, 4),
    Instruction::new(0x38, "JR C, {:#x}", 2, 12),
    Instruction::new(0x39, "ADD HL, SP", 1, 8),
    Instruction::new(0x3a, "LD A, (HL-)", 1, 8),
    Instruction::new(0x3b, "DEC SP", 1, 8),
    Instruction::new(0x3c, "INC A", 1, 4),
    Instruction::new(0x3d, "DEC A", 1, 4),
    Instruction::new(0x3e, "LD A, {:#x}", 2, 8),
    Instruction::new(0x3f, "CCF", 1, 4),
    Instruction::new(0x40, "LD B, B", 1, 4),
    Instruction::new(0x41, "LD B, C", 1, 4),
    Instruction::new(0x42, "LD B, D", 1, 4),
    Instruction::new(0x43, "LD B, E", 1, 4),
    Instruction::new(0x44, "LD B, H", 1, 4),
    Instruction::new(0x45, "LD B, L", 1, 4),
    Instruction::new(0x46, "LD B, (HL)", 1, 8),
    Instruction::new(0x47, "LD B, A", 1, 4),
    Instruction::new(0x48, "LD C, B", 1, 4),
    Instruction::new(0x49, "LD C, C", 1, 4),
    Instruction::new(0x4a, "LD C, D", 1, 4),
    Instruction::new(0x4b, "LD C, E", 1, 4),
    Instruction::new(0x4c, "LD C, H", 1, 4),
    Instruction::new(0x4d, "LD C, L", 1, 4),
    Instruction::new(0x4e, "LD C, (HL)", 1, 8),
    Instruction::new(0x4f, "LD C, A", 1, 4),
    Instruction::new(0x50, "LD D, B", 1, 4),
    Instruction::new(0x51, "LD D, C", 1, 4),
    Instruction::new(0x52, "LD D, D", 1, 4),
    Instruction::new(0x53, "LD D, E", 1, 4),
    Instruction::new(0x54, "LD D, H", 1, 4),
    Instruction::new(0x55, "LD D, L", 1, 4),
    Instruction::new(0x56, "LD D, (HL)", 1, 8),
    Instruction::new(0x57, "LD D, A", 1, 4),
    Instruction::new(0x58, "LD E, B", 1, 4),
    Instruction::new(0x59, "LD E, C", 1, 4),
    Instruction::new(0x5a, "LD E, D", 1, 4),
    Instruction::new(0x5b, "LD E, E", 1, 4),
    Instruction::new(0x5c, "LD E, H", 1, 4),
    Instruction::new(0x5d, "LD E, L", 1, 4),
    Instruction::new(0x5e, "LD E, (HL)", 1, 8),
    Instruction::new(0x5f, "LD E, A", 1, 4),
    Instruction::new(0x60, "LD H, B", 1, 4),
    Instruction::new(0x61, "LD H, C", 1, 4),
    Instruction::new(0x62, "LD H, D", 1, 4),
    Instruction::new(0x63, "LD H, E", 1, 4),
    Instruction::new(0x64, "LD H, H", 1, 4),
    Instruction::new(0x65, "LD H, L", 1, 4),
    Instruction::new(0x66, "LD H, (HL)", 1, 8),
    Instruction::new(0x67, "LD H, A", 1, 4),
    Instruction::new(0x68, "LD L, B", 1, 4),
    Instruction::new(0x69, "LD L, C", 1, 4),
    Instruction::new(0x6a, "LD L, D", 1, 4),
    Instruction::new(0x6b, "LD L, E", 1, 4),
    Instruction::new(0x6c, "LD L, H", 1, 4),
    Instruction::new(0x6d, "LD L, L", 1, 4),
    Instruction::new(0x6e, "LD L, (HL)", 1, 8),
    Instruction::new(0x6f, "LD L, A", 1, 4),
    Instruction::new(0x70, "LD (HL), B", 1, 8),
    Instruction::new(0x71, "LD (HL), C", 1, 8),
    Instruction::new(0x72, "LD (HL), D", 1, 8),
    Instruction::new(0x73, "LD (HL), E", 1, 8),
    Instruction::new(0x74, "LD (HL), H", 1, 8),
    Instruction::new(0x75, "LD (HL), L", 1, 8),
    Instruction::new(0x76, "HALT", 1, 4),
    Instruction::new(0x77, "LD (HL) A", 1, 8),
    Instruction::new(0x78, "LD A, B", 1, 4),
    Instruction::new(0x79, "LD A, C", 1, 4),
    Instruction::new(0x7a, "LD A, D", 1, 4),
    Instruction::new(0x7b, "LD A, E", 1, 4),
    Instruction::new(0x7c, "LD A, H", 1, 4),
    Instruction::new(0x7d, "LD A, L", 1, 4),
    Instruction::new(0x7e, "LD A, (HL)", 1, 8),
    Instruction::new(0x7f, "LD A, A", 1, 4),
    Instruction::new(0x80, "ADD A, B", 1, 4),
    Instruction::new(0x81, "ADD A, C", 1, 4),
    Instruction::new(0x82, "ADD A, D", 1, 4),
    Instruction::new(0x83, "ADD A, E", 1, 4),
    Instruction::new(0x84, "ADD A, H", 1, 4),
    Instruction::new(0x85, "ADD A, L", 1, 4),
    Instruction::new(0x86, "ADD A, (HL)", 1, 8),
    Instruction::new(0x87, "ADD A, A", 1, 4),
    Instruction::new(0x88, "ADC A, B", 1, 4),
    Instruction::new(0x89, "ADC A, C", 1, 4),
    Instruction::new(0x8a, "ADC A, D", 1, 4),
    Instruction::new(0x8b, "ADC A, E", 1, 4),
    Instruction::new(0x8c, "ADC A, H", 1, 4),
    Instruction::new(0x8d, "ADC A, L", 1, 4),
    Instruction::new(0x8e, "ADC A, (HL)", 1, 8),
    Instruction::new(0x8f, "ADC A, A", 1, 4),
    Instruction::new(0x90, "SUB B", 1, 4),
    Instruction::new(0x91, "SUB C", 1, 4),
    Instruction::new(0x92, "SUB D", 1, 4),
    Instruction::new(0x93, "SUB E", 1, 4),
    Instruction::new(0x94, "SUB H", 1, 4),
    Instruction::new(0x95, "SUB L", 1, 4),
    Instruction::new(0x96, "SUB (HL)", 1, 8),
    Instruction::new(0x97, "SUB A", 1, 4),
    Instruction::new(0x98, "SBC A, B", 1, 4),
    Instruction::new(0x99, "SBC A, C", 1, 4),
    Instruction::new(0x9a, "SBC A, D", 1, 4),
    Instruction::new(0x9b, "SBC A, E", 1, 4),
    Instruction::new(0x9c, "SBC A, H", 1, 4),
    Instruction::new(0x9d, "SBC A, L", 1, 4),
    Instruction::new(0x9e, "SBC A, (HL)", 1, 8),
    Instruction::new(0x9f, "SBC A, A", 1, 4),
    Instruction::new(0xa0, "AND B", 1, 4),
    Instruction::new(0xa1, "AND C", 1, 4),
    Instruction::new(0xa2, "AND D", 1, 4),
    Instruction::new(0xa3, "AND E", 1, 4),
    Instruction::new(0xa4, "AND H", 1, 4),
    Instruction::new(0xa5, "AND L", 1, 4),
    Instruction::new(0xa6, "AND (HL)", 1, 8),
    Instruction::new(0xa7, "AND A", 1, 4),
    Instruction::new(0xa8, "XOR B", 1, 4),
    Instruction::new(0xa9, "XOR C", 1, 4),
    Instruction::new(0xaa, "XOR D", 1, 4),
    Instruction::new(0xab, "XOR E", 1, 4),
    Instruction::new(0xac, "XOR H", 1, 4),
    Instruction::new(0xad, "XOR L", 1, 4),
    Instruction::new(0xae, "XOR (HL)", 1, 8),
    Instruction::new(0xaf, "XOR A", 1, 4),
    Instruction::new(0xb0, "OR B", 1, 4),
    Instruction::new(0xb1, "OR C", 1, 4),
    Instruction::new(0xb2, "OR D", 1, 4),
    Instruction::new(0xb3, "OR E", 1, 4),
    Instruction::new(0xb4, "OR H", 1, 4),
    Instruction::new(0xb5, "OR L", 1, 4),
    Instruction::new(0xb6, "OR (HL)", 1, 8),
    Instruction::new(0xb7, "OR A", 1, 4),
    Instruction::new(0xb8, "CP B", 1, 4),
    Instruction::new(0xb9, "CP C", 1, 4),
    Instruction::new(0xba, "CP D", 1, 4),
    Instruction::new(0xbb, "CP E", 1, 4),
    Instruction::new(0xbc, "CP H", 1, 4),
    Instruction::new(0xbd, "CP L", 1, 4),
    Instruction::new(0xbe, "CP (HL)", 1, 8),
    Instruction::new(0xbf, "CP A", 1, 4),
    Instruction::new(0xc0, "RET NZ", 1, 20),
    Instruction::new(0xc1, "POP BC", 1, 12),
    Instruction::new(0xc2, "JP NZ, {:#x}", 3, 16),
    Instruction::new(0xc3, "JP {:#x}", 3, 16),
    Instruction::new(0xc4, "CALL NZ, {:#x}", 3, 24),
    Instruction::new(0xc5, "PUSH BC", 1, 16),
    Instruction::new(0xc6, "ADD A, {:#x}", 2, 8),
    Instruction::new(0xc7, "RST 00H", 1, 16),
    Instruction::new(0xc8, "RET Z", 1, 20),
    Instruction::new(0xc9, "RET", 1, 16),
    Instruction::new(0xca, "JP Z, {:#x}", 3, 16),
    Instruction::new(0xcb, "PREFIX CB", 1, 4),
    Instruction::new(0xcc, "CALL Z, {:#x}", 3, 24),
    Instruction::new(0xcd, "CALL {:#x}", 3, 24),
    Instruction::new(0xce, "ADC A, {:#x}", 2, 8),
    Instruction::new(0xcf, "RST 08H", 1, 16),
    Instruction::new(0xd0, "RET NC", 1, 20),
    Instruction::new(0xd1, "POP DE", 1, 12),
    Instruction::new(0xd2, "JP NC, {:#x}", 3, 24),
    Instruction::new(0xd3, "INVALID", 0, 0),
    Instruction::new(0xd4, "CALL NC, {:#x}", 3, 24),
    Instruction::new(0xd5, "PUSH DE", 1, 16),
    Instruction::new(0xd6, "SUB {:#x}", 2, 8),
    Instruction::new(0xd7, "RST 10H", 1, 16),
    Instruction::new(0xd8, "RET C", 1, 20),
    Instruction::new(0xd9, "RETI", 1, 16),
    Instruction::new(0xda, "JP C, {:#x}", 3, 16),
    Instruction::new(0xdb, "INVALID", 0, 0),
    Instruction::new(0xdc, "CALL C, {:#x}", 3, 24),
    Instruction::new(0xdd, "INVALID", 0, 0),
    Instruction::new(0xde, "SBC A, {:#x}", 2, 8),
    Instruction::new(0xdf, "RST 18H", 1, 16),
    Instruction::new(0xe0, "LDH ({:#x}), A", 2, 12),
    Instruction::new(0xe1, "POP HL", 1, 12),
    Instruction::new(0xe2, "LD (C), A", 2, 8),
    Instruction::new(0xe3, "INVALID", 0, 0),
    Instruction::new(0xe4, "INVALID", 0, 0),
    Instruction::new(0xe5, "PUSH HL", 1, 16),
    Instruction::new(0xe6, "AND {:#x}", 2, 8),
    Instruction::new(0xe7, "RST 20H", 1, 16),
    Instruction::new(0xe8, "ADD SP, {:#x}", 2, 16),
    Instruction::new(0xe9, "JP (HL)", 1, 4),
    Instruction::new(0xea, "LD ({:#x}), A", 3, 16),
    Instruction::new(0xeb, "INVALID", 0, 0),
    Instruction::new(0xec, "INVALID", 0, 0),
    Instruction::new(0xed, "INVALID", 0, 0),
    Instruction::new(0xee, "XOR {:#x}", 2, 8),
    Instruction::new(0xef, "RST 28H", 1, 16),
    Instruction::new(0xf0, "LDH A, ({:#x})", 2, 12),
    Instruction::new(0xf1, "POP AF", 1, 12),
    Instruction::new(0xf2, "LD A, (C)", 2, 8),
    Instruction::new(0xf3, "DI", 1, 4),
    Instruction::new(0xf4, "INVALID", 0, 0),
    Instruction::new(0xf5, "PUSH AF", 1, 16),
    Instruction::new(0xf6, "OR {:#x}", 2, 8),
    Instruction::new(0xf7, "RST 30H", 1, 16),
    Instruction::new(0xf8, "LD HL, SP+{:#x}", 2, 12),
    Instruction::new(0xf9, "LD SP, HL", 1, 8),
    Instruction::new(0xfa, "LD A, ({:#x})", 3, 16),
    Instruction::new(0xfb, "EI", 1, 4),
    Instruction::new(0xfc, "INVALID", 0, 0),
    Instruction::new(0xfd, "INVALID", 0, 0),
    Instruction::new(0xfe, "CP d8", 2, 8),
    Instruction::new(0xff, "RST 38H", 1, 16),
];

// execute_single_insn() emulates the execution of a single instruction and
// updates the queued changes to the emulator state to reflect it
pub fn execute_single_insn(opcode: u8, state: &mut GarntboyState) {
    // reset the state changes
    state.memory_changes.clear();
    state.register_changes = state.registers;

    // fetch the right instruction object
    let insn: Instruction = INSTRUCTIONS[opcode as usize];

    // switch to match the correct opcode
    match opcode {
        // NOP
        0x00 => {
        },
        // JP a16
        0xc3 => {

        },
        // unimplemented opcode, panic!
        _ => {
            panic!("Unimplemented opcode: {:#x}! Registers: {}",
                opcode, state.registers);
        }
    }

    // update pc, set cycles_to_sleep
    let old_pc: u16 = state.register_changes.pc();
    state.register_changes.set_pc(old_pc + (insn.length as u16) - 1);
    state.cycles_to_sleep = insn.cycles;
}